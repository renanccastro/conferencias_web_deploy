<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <contextName>lipjava</contextName>
    <jmxConfigurator/>

    <property resource="env.properties"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{dd/MM/yyyy-HH:mm:ss} %-5level %logger{36}:%line %X{method} %X{requestURL} %X{username} -
                %msg%n
            </pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--See also http://logback.qos.ch/manual/appenders.html#RollingFileAppender-->
        <file>${jboss.server.log.dir}/lipjava.log</file>
        <encoder>
            <pattern>%d{dd/MM/yyyy-HH:mm:ss} %-5level %logger{36}:%line %X{method} %X{requestURL} %X{username} -
                %msg%n
            </pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${jboss.server.log.dir}/lipjava.%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>5</maxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>5MB</maxFileSize>
        </triggeringPolicy>
    </appender>


    <if condition='property("env").contains("homolog") || property("env").contains("prod")'>
        <then>
            <appender name="EMAIL" class="ch.qos.logback.classic.net.SMTPAppender">
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <!--warns serão enfilerados e notificados no primeiro proximo erro que ocorrer OnErrorEvaluator-->
                    <level>WARN</level>
                </filter>
                <to>lip@tecsinapse.com.br</to>
                <from>erro@lipjava.com.br</from>

                <subject>[LIPJAVA-ERRO] - ${env} ${branch} %-5level - %logger{20}</subject>

                <sessionViaJNDI>true</sessionViaJNDI>
                <jndiLocation>java:jboss/mail/MandrillLipjava</jndiLocation>

                <layout class="ch.qos.logback.classic.html.HTMLLayout"/>
            </appender>
        </then>
    </if>

    <appender name="ASYNC_STDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="STDOUT"/>
        <includeCallerData>true</includeCallerData>
    </appender>
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <if condition='property("env").contains("homolog") || property("env").contains("prod")'>
        <then>
            <appender name="ASYNC_EMAIL" class="ch.qos.logback.classic.AsyncAppender">
                <appender-ref ref="EMAIL"/>
                <includeCallerData>true</includeCallerData>
            </appender>
        </then>
    </if>

    <logger name="com.googlecode.flyway" level="DEBUG"/>
    <logger name="br.com.tecsinapse" level="DEBUG"/>

    <!-- loga inicio das rotas -->
    <logger name="org.apache.camel.component.file.remote.FtpConsumer" level="DEBUG"/>
    <logger name="org.apache.camel.component.quartz2.QuartzEndpoint" level="DEBUG"/>
    <root level="INFO">
        <appender-ref ref="ASYNC_FILE"/>

        <!--STDOUT somente necessário para dev-->
        <if condition='property("env").contains("dev")'>
            <then>
                <appender-ref ref="ASYNC_STDOUT"/>
            </then>
        </if>
        <if condition='property("env").contains("homolog") || property("env").contains("prod")'>
            <then>
                <appender-ref ref="ASYNC_EMAIL"/>
            </then>
        </if>
    </root>
</configuration>
